1. JVM. Byte code.
	Структура файла *.java:
		package nkotkin; // должно совпадать с папкой пакета
		public class Calculate { // должно совпадать с именем файла
			public static void mine(String[] args) { // Не обязательно. Запускающий метод
			}
		}
	Компиляция:
		javac -d out src\nkotkin\Calculate.java // Скомпилировать файл Calculate.java в папку \out
	Запуск:
		java -cp out ru.nkotkin.Calculate // Запустить из папки out класс Calculate с пакетом nkotkin
		java -cp java-a-from-z-1.0.jar ru.nkotkin.Calculate // Запуск после maven
2. Тип данных.
	Примитивные (primitive)
		byte, char, int, long, float, double
	Ссылочные (reference)
		Object
3. Условный оператор
	Для сравнения ссылочных переменных (и строк):
		v1.equils(v2); // возвращает true если они одинаковые
	Тернарный оператор сравнения:
		int i = (a > b) ? 1 : 2; // Если a > b то в i запишет 1 иначе 2
	switch использовать не рекомендуется т.к. его тяжело расширять
4. Циклы
	forEach:
		for(<тип> <имя> : <массив>) {} // Взять каждый элемент типа <тип> из массива <массив>, присвоить ему имя <имя> и  сделать с ним что то
			for(String arg : args) {} // Взять из коммандной строки элемент, записать его в arg, на следующем шаге
	continue и break - это плохой стиль кода, лучше их избегать